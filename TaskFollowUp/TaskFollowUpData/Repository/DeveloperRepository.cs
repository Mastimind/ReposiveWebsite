//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq.Expressions;
namespace TaskFollowUpData
{
    public partial class DeveloperRepository:IRepository<Developer>,IRepository
    {
    		DbContext _context;
            public DeveloperRepository(DbContext context)
            {
                _context = context ?? new TaskFollowUpModelContainer();
            }
    
            public IEnumerable<Developer> Get(Expression<Func<Developer, bool>> predicate, string [] relations)
            {
                    var query = _context.Set<Developer>().Select(s=>s);
                    foreach (var rel in relations)
                    {
                      query=  query.Include(rel);
                    }
    
                    return (predicate!=null ? query.Where(predicate) : query).ToList();        
                }
    
    		public Developer GetById(Expression<Func<Developer, bool>> predicate, string [] relations, int Id)
            {
    				var query = _context.Set<Developer>().Select(s=>s);;
                    foreach (var rel in relations)
                    {
                      query=  query.Include(rel);
                    }
                return (predicate!=null? query.Where(predicate) : query).FirstOrDefault(s => s.Id == Id);
            }
    
            public void Save(List<Developer> entities)
            {
                foreach(var entity in entities)
    			{
    				SetState(entity);
    			}
    			_context.SaveChanges();
            }
    
            public void Save(Developer entity)
            {
                SetState(entity);
    			
    			_context.SaveChanges();
            }
    
            public void Delete(Developer entity)
            {
                _context.Set<Developer>().Remove(entity);
    			
    			_context.SaveChanges();
            }
    
            public void DeleteById(int Id)
            {
               var entity= _context.Set<Developer>().FirstOrDefault(s => s.Id == Id);
    
    		   Delete(entity);
            }
    
    		 private void SetState(Developer entity)
             {
                    _context.Entry(entity).State = entity.Id <= 0 ? EntityState.Added : EntityState.Modified;
             }
    }
}
